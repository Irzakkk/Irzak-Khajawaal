{%- comment -%}
  sections/hotspot-products.liquid
  - Hotspot product grid (editable blocks: product picker)
  - Up to 6 blocks (hotspots). Grid: 3 cols desktop, 2 cols mobile
  - Click hotspot -> open animated modal with product card:
      * product image, title, price, short description
      * color swatches (box switcher) and size select (dropdown)
      * quantity fixed to 1 and Add to cart (works)
  - All variant mapping rendered server-side in data-variants JSON for JS
  - Buttons border-radius removed (single-line CSS)
  - Per-block hotspot position via settings (left% / top%)
{%- endcomment -%}

{% schema %}
{
  "name": "Hotspot Products",
  "settings": [
    { "type": "text", "id": "heading", "label": "Section heading", "default": "Tisso vision in the wild" },
    { "type": "number", "id": "columns_desktop", "label": "Desktop columns (3 recommended)", "default": 3 },
    { "type": "number", "id": "columns_mobile", "label": "Mobile columns (2 recommended)", "default": 2 }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Hotspot product",
      "limit": 6,
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" },
        { "type": "image_picker", "id": "override_image", "label": "Override product image (optional)" },
        { "type": "number", "id": "hotspot_left", "label": "Hotspot left (%)", "default": 5 },
        { "type": "number", "id": "hotspot_top", "label": "Hotspot top (%)", "default": 5 }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [ { "name": "Hotspot Products" } ]
}
{% endschema %}

<section id="hotspot-products-{{ section.id }}" data-section-id="{{ section.id }}" class="hotspot-products-section">
  <style>
    /* Basic layout */
    #hotspot-products-{{ section.id }} { --hp-gap: 18px; --hp-max-w: 1200px; padding: 20px; box-sizing: border-box; }
    #hotspot-products-{{ section.id }} .hp-inner { max-width: var(--hp-max-w); margin: 0 auto; }

    #hotspot-products-{{ section.id }} .hp-heading { font-size: 22px; margin: 6px 0 18px; font-weight:700; }

    /* Grid */
    #hotspot-products-{{ section.id }} .hp-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: var(--hp-gap); }
    @media (max-width: 989px) {
      #hotspot-products-{{ section.id }} .hp-grid { grid-template-columns: repeat(2, 1fr); }
    }

    /* Card */
    #hotspot-products-{{ section.id }} .hp-card { position: relative; overflow: hidden; background: #fff; }
    #hotspot-products-{{ section.id }} .hp-image { display:block; width:100%; height: 0; padding-bottom: 100%; position:relative; background:#f5f5f5; }
    #hotspot-products-{{ section.id }} .hp-image img { position:absolute; inset:0; width:100%; height:100%; object-fit:cover; }

    /* Hotspot button (circle + plus) */
    #hotspot-products-{{ section.id }} .hp-hotspot {
      position: absolute;
      width: 34px;
      height: 34px;
      border-radius: 50%;
      background: rgba(255,255,255,0.95);
      border: 2px solid rgba(0,0,0,0.08);
      display:flex; align-items:center; justify-content:center;
      cursor: pointer;
      transition: transform .18s ease, box-shadow .18s ease;
      z-index: 10;
      padding:0;
    }
    #hotspot-products-{{ section.id }} .hp-hotspot:hover { transform: translateY(-3px); box-shadow: 0 8px 18px rgba(0,0,0,.12); }
    #hotspot-products-{{ section.id }} .hp-hotspot .hp-plus { font-size:18px; line-height:1; font-weight:700; color:#111; }

    /* Modal (animated) */
    #hotspot-products-{{ section.id }} .hp-modal {
      position: fixed;
      inset: 0;
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 2000;
      background: rgba(0,0,0,0.45);
      opacity: 0;
      transition: opacity .28s ease;
      overflow-y: auto;
      padding: 36px 20px;
    }
    #hotspot-products-{{ section.id }} .hp-modal.open { display:flex; opacity:1; }

    #hotspot-products-{{ section.id }} .hp-modal__card {
      width: 100%;
      max-width: 980px;
      background: #fff;
      border-radius: 10px;
      overflow: hidden;
      transform: translateY(20px) scale(.99);
      transition: transform .24s cubic-bezier(.2,.8,.2,1);
      box-shadow: 0 24px 80px rgba(0,0,0,.25);
    }
    #hotspot-products-{{ section.id }} .hp-modal.open .hp-modal__card { transform: translateY(0) scale(1); }

    /* Modal inner layout - two columns */
    #hotspot-products-{{ section.id }} .hp-modal__grid { display:grid; grid-template-columns: 1fr 420px; gap: 0; }
    @media (max-width: 820px) {
      #hotspot-products-{{ section.id }} .hp-modal__grid { grid-template-columns: 1fr; }
      #hotspot-products-{{ section.id }} .hp-modal__card { border-radius: 0; max-width: 100%; height: 100%; }
    }

    /* Left image */
    #hotspot-products-{{ section.id }} .hp-modal__image { background:#f6f6f6; display:block; min-height: 420px; }
    #hotspot-products-{{ section.id }} .hp-modal__image img { width:100%; height:100%; object-fit:cover; display:block; }

    /* Right content */
    #hotspot-products-{{ section.id }} .hp-modal__content { padding: 28px 30px; }
    #hotspot-products-{{ section.id }} .hp-title { font-size:24px; font-weight:700; margin:0 0 10px; }
    #hotspot-products-{{ section.id }} .hp-price { font-size:20px; font-weight:700; margin-bottom:14px; }
    #hotspot-products-{{ section.id }} .hp-desc { font-size:14px; color:#333; line-height:1.6; margin-bottom:18px; max-height: 180px; overflow:auto; }

    /* Color swatches as box switcher - grid-like */
    #hotspot-products-{{ section.id }} .hp-colors { display:flex; gap:10px; margin-bottom:18px; flex-wrap:wrap; }
    #hotspot-products-{{ section.id }} .hp-color {
      appearance: none;
      -webkit-appearance: none;
      display:inline-flex; align-items:center; justify-content:center;
      min-width:80px; padding:12px 14px; border:1px solid #ddd; background:#f4f4f4;
      cursor:pointer; font-weight:700; color:#111; text-transform:none;
    }
    /* left border for selected; we'll set border-left-color in JS for accurate color */
    #hotspot-products-{{ section.id }} .hp-color.selected { border-left-width:6px; border-left-style:solid; background:#fff; box-shadow:0 6px 18px rgba(0,0,0,.06); }

    /* Size select */
    #hotspot-products-{{ section.id }} .hp-size { display:block; width:100%; padding:12px; border:1px solid #ddd; margin-bottom:18px; font-size:14px; }

    /* Add to cart button */
    #hotspot-products-{{ section.id }} .hp-addwrap { margin-top:6px; }
    #hotspot-products-{{ section.id }} .hp-add { display:inline-flex; align-items:center; gap:10px; padding:14px 22px; background:#000; color:#fff; font-weight:700; text-decoration:none; border:0; cursor:pointer; }

    /* Remove border-radius on buttons (single-line change) */
    #hotspot-products-{{ section.id }} .hp-add,
    #hotspot-products-{{ section.id }} .hp-modal-close,
    #hotspot-products-{{ section.id }} .hp-color,
    #hotspot-products-{{ section.id }} .hp-hotspot { border-radius: 0 !important; }

    /* Close X */
    #hotspot-products-{{ section.id }} .hp-modal-close { position:absolute; right:12px; top:12px; background:transparent; border:0; font-size:26px; cursor:pointer; color:#111; padding:6px; }

    /* small helpers - hidden (we removed textual quantity) */
    #hotspot-products-{{ section.id }} .hp-note { font-size:12px; color:#777; margin-top:8px; display:none; }
  </style>

  <div class="hp-inner">
    <h2 class="hp-heading">{{ section.settings.heading }}</h2>

    <div class="hp-grid" id="hpGrid-{{ section.id }}">
      {%- for block in section.blocks -%}
        {%- assign prod_handle = block.settings.product -%}
        {% if prod_handle != blank and all_products[prod_handle] %}
          {% assign prod = all_products[prod_handle] %}
        {% else %}
          {% assign prod = nil %}
        {% endif %}

        <div class="hp-card" data-block-id="{{ block.id }}">
          <div class="hp-image">
            {% if block.settings.override_image != blank %}
              <img src="{{ block.settings.override_image | img_url: '800x800' }}" alt="{{ prod.title | default: block.settings.override_image.alt }}">
            {% elsif prod and prod.featured_image %}
              <img src="{{ prod.featured_image | img_url: '800x800' }}" alt="{{ prod.title }}">
            {% else %}
              <img src="{{ 'placeholder-image.png' | asset_url }}" alt="">
            {% endif %}
          </div>

          {%- comment -%}
            Hotspot button - position inline from block settings (percent values).
          {%- endcomment -%}
          {% assign left_pct = block.settings.hotspot_left | default: 5 %}
          {% assign top_pct  = block.settings.hotspot_top  | default: 5 %}
          <button
            class="hp-hotspot"
            type="button"
            aria-haspopup="dialog"
            aria-label="Open product quick view"
            data-open-modal-id="hpModal-{{ block.id }}"
            style="left: {{ left_pct }}%; top: {{ top_pct }}%;">
            <span class="hp-plus">+</span>
          </button>

          <!-- Modal markup for this block (hidden until opened) -->
          <div id="hpModal-{{ block.id }}" class="hp-modal" role="dialog" aria-hidden="true" aria-labelledby="hpTitle-{{ block.id }}">
            <div class="hp-modal__card" role="document">
              <button class="hp-modal-close" aria-label="Close" data-close-modal-id="hpModal-{{ block.id }}">âœ•</button>

              <div class="hp-modal__grid">
                <div class="hp-modal__image">
                  {% if block.settings.override_image != blank %}
                    <img src="{{ block.settings.override_image | img_url: '1200x1200' }}" alt="{{ prod.title | default: 'Image' }}">
                  {% elsif prod and prod.featured_image %}
                    <img src="{{ prod.featured_image | img_url: '1200x1200' }}" alt="{{ prod.title }}">
                  {% else %}
                    <img src="{{ 'placeholder-image.png' | asset_url }}" alt="">
                  {% endif %}
                </div>

                <div class="hp-modal__content">
                  {% if prod %}
                    <h3 id="hpTitle-{{ block.id }}" class="hp-title">{{ prod.title }}</h3>

                    <div class="hp-price" data-price-target>
                      {% assign first_variant = prod.variants.first %}
                      {{ first_variant.price | money }}
                    </div>

                    <div class="hp-desc">{{ prod.description | strip_html | truncate: 260 }}</div>

                    {%- comment -%}
                      Identify color & size option indices (safe checks). Use empty-string markers.
                    {%- endcomment -%}
                    {% assign color_option_index = '' %}
                    {% assign size_option_index = '' %}

                    {% for opt_name in prod.options %}
                      {% assign idx = forloop.index0 %}
                      {% assign name_down = opt_name | downcase %}

                      {% if color_option_index == '' %}
                        {% if name_down contains 'color' or name_down contains 'colour' %}
                          {% assign color_option_index = idx %}
                        {% endif %}
                      {% endif %}

                      {% if size_option_index == '' %}
                        {% if name_down contains 'size' %}
                          {% assign size_option_index = idx %}
                        {% endif %}
                      {% endif %}
                    {% endfor %}

                    {% if color_option_index == '' and prod.options.size > 0 %}
                      {% assign color_option_index = 0 %}
                    {% endif %}
                    {% if size_option_index == '' and prod.options.size > 1 %}
                      {% assign size_option_index = 1 %}
                    {% endif %}

                    {%- comment -%}
                      Build variants map: array of strings -> JSON. Each line: "opt1||opt2::variantId::available::price"
                    {%- endcomment -%}
                    {% assign variants_map = '' | split: ',' %}
                    {% for var in prod.variants %}
                      {% assign key = var.options | join: '||' %}
                      {% capture map_item %}{{ key }}::{{ var.id }}::{{ var.available }}::{{ var.price | money_without_currency }}{% endcapture %}
                      {% assign variants_map = variants_map | push: map_item %}
                    {% endfor %}
                    {% assign variants_json = variants_map | json %}

                    {%- comment -%}
                      Output color buttons (unique values). Use stripped lower-case for seen check.
                    {%- endcomment -%}
                    {% if prod.options.size > 0 and color_option_index != '' %}
                      <div class="hp-colors" data-color-index="{{ color_option_index }}">
                        {% assign seen_colors = '' | split: ',' %}
                        {% for var in prod.variants %}
                          {% assign raw_color_val = var.options[color_option_index] | default: '' %}
                          {% assign color_val_key = raw_color_val | strip | downcase %}
                          {% unless seen_colors contains color_val_key %}
                            {% assign seen_colors = seen_colors | push: color_val_key %}
                            <button type="button"
                              class="hp-color"
                              data-block="{{ block.id }}"
                              data-option-index="{{ color_option_index }}"
                              data-option-value="{{ raw_color_val | escape }}"
                              aria-pressed="false">
                              {{ raw_color_val }}
                            </button>
                          {% endunless %}
                        {% endfor %}
                      </div>
                    {% endif %}

                    {%- comment -%}
                      Output size select (unique)
                    {%- endcomment -%}
                    {% if prod.options.size > 0 and size_option_index != '' %}
                      <select class="hp-size" data-size-index="{{ size_option_index }}">
                        <option value="">{{ 'Choose your size' }}</option>
                        {% assign seen_sizes = '' | split: ',' %}
                        {% for var in prod.variants %}
                          {% assign size_val = var.options[size_option_index] | default: '' %}
                          {% assign size_key = size_val | strip | downcase %}
                          {% unless seen_sizes contains size_key %}
                            {% assign seen_sizes = seen_sizes | push: size_key %}
                            <option value="{{ size_val | escape }}">{{ size_val }}</option>
                          {% endunless %}
                        {% endfor %}
                      </select>
                    {% endif %}

                    {%- comment -%}
                      Add-to-cart form: default variant is first variant; JS will update the hidden id input when options change.
                    {%- endcomment -%}
                    {% assign default_variant = prod.variants.first %}
                    <form method="post" action="/cart/add" class="hp-add-form" data-block="{{ block.id }}" novalidate>
                      <input type="hidden" name="id" value="{{ default_variant.id }}" class="hp-variant-input" />
                      <input type="hidden" name="quantity" value="1" />
                      <div class="hp-addwrap">
                        <button type="submit" class="hp-add">ADD TO CART</button>
                      </div>
                    </form>

                    {%- comment -%}
                      Expose the variants_json for the client JS to parse.
                    {%- endcomment -%}
                    <script type="application/json" class="hp-variants-data" data-block="{{ block.id }}">
                      {{ variants_json }}
                    </script>

                  {% else %}
                    <div class="hp-title">No product selected</div>
                    <div class="hp-note">Please choose a product for this hotspot block in the theme editor.</div>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
      {%- endfor -%}
    </div>
  </div>

  <!-- Client JS (static) - no Liquid variables inside JS body; reads data-* attributes/rendered JSON -->
  <script>
  (function(){
    'use strict';
    var sectionRoot = document.querySelector('[id^="hotspot-products-"]');
    if (!sectionRoot) return;

    // small color-name -> hex map (extend if needed)
    var colorNameToHex = {
      "black": "#111111",
      "white": "#ffffff",
      "red": "#d32f2f",
      "blue": "#1976d2",
      "green": "#388e3c",
      "grey": "#9e9e9e",
      "gray": "#9e9e9e",
      "beige": "#d6c6a8",
      "brown": "#7b5e57",
      "yellow": "#f6d13d",
      "pink": "#e91e63",
      "purple": "#7b1fa2"
    };

    // Helper: parse variants data (array of strings "opt1||opt2::id::available::price")
    function parseVariantsData(scriptEl) {
      try {
        var raw = scriptEl.textContent || scriptEl.innerText || '[]';
        var arr = JSON.parse(raw);
        var map = {};
        for (var i = 0; i < arr.length; i++) {
          var item = arr[i];
          var parts = item.split('::');
          var key = parts[0];
          var vid = parts[1];
          var available = (parts[2] === 'true' || parts[2] === 'True' || parts[2] === '1');
          var price = parts[3] || '';
          map[key] = { id: vid, available: available, price: price };
        }
        return map;
      } catch (err) {
        return {};
      }
    }

    // Build candidate key from optionCount and selection indexes
    function buildCandidateKey(modalEl, optionCount, colorIndex, sizeIndex) {
      var selected = [];
      for (var i = 0; i < optionCount; i++) {
        var val = '';
        if (colorIndex !== null && colorIndex === i) {
          var colorBtn = modalEl.querySelector('.hp-color.selected[data-option-index="'+colorIndex+'"]');
          if (colorBtn) val = colorBtn.getAttribute('data-option-value') || '';
        }
        if (sizeIndex !== null && sizeIndex === i) {
          var sizeSelect = modalEl.querySelector('select.hp-size[data-size-index="'+sizeIndex+'"]');
          if (sizeSelect) {
            // if user selected placeholder, value is ""
            val = sizeSelect.value || val;
          }
        }
        // fallback: pull sample value from variants data first entry
        if (!val) {
          var variantsScript = modalEl.querySelector('script.hp-variants-data');
          if (variantsScript) {
            try {
              var arr = JSON.parse(variantsScript.textContent || variantsScript.innerText || '[]');
              if (arr.length) {
                var sampleParts = arr[0].split('::')[0].split('||');
                val = sampleParts[i] || '';
              }
            } catch (e) {}
          }
        }
        selected.push(val);
      }
      return selected.join('||');
    }

    // Find best matching variant object from variantsMap
    function findVariantObj(variantsMap, candidateKey) {
      if (!variantsMap) return null;
      if (variantsMap[candidateKey]) return variantsMap[candidateKey];
      var keys = Object.keys(variantsMap);
      for (var k = 0; k < keys.length; k++) {
        var mapKey = keys[k];
        var mapParts = mapKey.split('||');
        var candParts = candidateKey.split('||');
        var ok = true;
        for (var i = 0; i < mapParts.length; i++) {
          if (candParts[i] && candParts[i] !== mapParts[i]) { ok = false; break; }
        }
        if (ok) return variantsMap[mapKey];
      }
      return null;
    }

    // Open modal when .hp-hotspot clicked
    sectionRoot.addEventListener('click', function(e){
      var btn = e.target.closest && e.target.closest('.hp-hotspot');
      if (!btn) return;
      e.preventDefault();
      var modalId = btn.getAttribute('data-open-modal-id');
      var modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('open');
        modal.setAttribute('aria-hidden','false');
        var focusEl = modal.querySelector('button, a, input, select, textarea');
        if (focusEl) focusEl.focus();
        document.documentElement.style.overflow = 'hidden';
        document.body.style.overflow = 'hidden';
      }
    }, false);

    // Close modal when clicking close button or overlay
    sectionRoot.addEventListener('click', function(e){
      var close = e.target.closest && e.target.closest('[data-close-modal-id]');
      if (close) {
        var mid = close.getAttribute('data-close-modal-id');
        var modal = document.getElementById(mid);
        if (modal) {
          modal.classList.remove('open');
          modal.setAttribute('aria-hidden','true');
          document.documentElement.style.overflow = '';
          document.body.style.overflow = '';
        }
        return;
      }
      var modalOverlay = e.target.closest && e.target.closest('.hp-modal.open');
      if (modalOverlay && e.target === modalOverlay) {
        modalOverlay.classList.remove('open');
        modalOverlay.setAttribute('aria-hidden','true');
        document.documentElement.style.overflow = '';
        document.body.style.overflow = '';
      }
    }, false);

    // ESC to close
    document.addEventListener('keydown', function(e){
      if (e.key === 'Escape' || e.key === 'Esc') {
        var openModals = sectionRoot.querySelectorAll('.hp-modal.open');
        openModals.forEach(function(m){
          m.classList.remove('open');
          m.setAttribute('aria-hidden','true');
        });
        document.documentElement.style.overflow = '';
        document.body.style.overflow = '';
      }
    });

    // Wire up each modal instance
    var modals = sectionRoot.querySelectorAll('.hp-modal');
    modals.forEach(function(modal){
      var variantsScript = modal.querySelector('script.hp-variants-data');
      var variantsMap = variantsScript ? parseVariantsData(variantsScript) : {};

      // number of option segments from any variantsMap key
      var optionCount = 1;
      var sampleKey = Object.keys(variantsMap)[0] || '';
      if (sampleKey) optionCount = sampleKey.split('||').length;

      // get indices
      var colorIndexEl = modal.querySelector('[data-color-index]');
      var colorIndex = colorIndexEl ? parseInt(colorIndexEl.getAttribute('data-color-index'), 10) : null;
      var sizeSelectEl = modal.querySelector('select.hp-size');
      var sizeIndex = sizeSelectEl ? parseInt(sizeSelectEl.getAttribute('data-size-index'), 10) : null;

      // color buttons
      var colorBtns = Array.prototype.slice.call(modal.querySelectorAll('.hp-color'));
      colorBtns.forEach(function(btn){
        btn.addEventListener('click', function(e){
          e.preventDefault();
          colorBtns.forEach(function(b){ b.classList.remove('selected'); b.setAttribute('aria-pressed','false'); b.style.borderLeftColor = ''; });
          btn.classList.add('selected');
          btn.setAttribute('aria-pressed','true');

          // set left-border color based on value (try hex then color name map)
          var colorVal = (btn.getAttribute('data-option-value') || '').trim();
          var hex = null;
          if (colorVal.match(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i)) {
            hex = colorVal;
          } else {
            var k = colorVal.toLowerCase();
            if (colorNameToHex[k]) hex = colorNameToHex[k];
          }
          if (hex) {
            btn.style.borderLeftColor = hex;
          } else {
            // fallback to black
            btn.style.borderLeftColor = '#111';
          }

          updateSelectionAndVariant(modal, variantsMap, optionCount, colorIndex, sizeIndex);
        }, false);
      });

      // size select
      if (sizeSelectEl) {
        sizeSelectEl.addEventListener('change', function(){
          updateSelectionAndVariant(modal, variantsMap, optionCount, colorIndex, sizeIndex);
        }, false);
      }

      // attempt default selection: first color button (if exists)
      if (colorBtns.length) {
        var first = colorBtns[0];
        first.classList.add('selected');
        first.setAttribute('aria-pressed','true');
        // set border color for first if possible
        var firstVal = (first.getAttribute('data-option-value') || '').trim();
        var fh = null;
        if (firstVal.match(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i)) fh = firstVal;
        else if (colorNameToHex[firstVal.toLowerCase()]) fh = colorNameToHex[firstVal.toLowerCase()];
        first.style.borderLeftColor = fh || '#111';
      }

      // Update selection & hidden variant input
      function updateSelectionAndVariant(modalEl, variantsMapping, optCount, cIndex, sIndex) {
        var candidateKey = buildCandidateKey(modalEl, optCount, cIndex, sIndex);
        var variantObj = findVariantObj(variantsMapping, candidateKey);
        if (variantObj && variantObj.id) {
          var input = modalEl.querySelector('.hp-variant-input');
          if (input) input.value = variantObj.id;
          var priceEl = modalEl.querySelector('[data-price-target]');
          if (priceEl && variantObj.price) priceEl.textContent = variantObj.price;
        }
      }

      // Initialize variant according to defaults
      updateSelectionAndVariant(modal, variantsMap, optionCount, colorIndex, sizeIndex);
    });

  })();
  </script>

</section>
